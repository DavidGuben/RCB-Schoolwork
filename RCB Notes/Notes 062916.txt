NODE

CONST DECELARATION:

SYNTAX
const name1 = value1 [, name2 = value2 [, ... [, nameN = valueN]]];

DESCRIPTION
The const declaration creates a read-only reference to a value.
It does not mean the value it holds is immutable, just that
the variable identifier cannot be reassigned.


SPLIT DECLARATION:

SYNTAX
var str = "How are you doing today?";
var res = str.split(" ");

DESCRIPTION
The split() method is used to split a string into an array
of substrings, and returns the new array. Whatever is placed
in the split brackets is what it looks for to break off the line
for example if a comma is placed ( ie split(',') ) it will split up
everytime it finds a comma.

PROCESS.ARGV[]:

SYNTAX
process.argv[2]

DESCRIPTION
process: The process object is a global that provides information about,
and control over, the current Node.js process. As a global,
it is always available to Node.js applications without using 
require().

process.argv(): The process.argv property returns a array containing
the command line arguments passed when the Node.js process was 
launched. The first element will be 'node', the second element 
will be the name of the JavaScript file. The remaining elements 
will be any additional command line arguments.

SWITCH CASE

SYNTAX

switch (expression) {
  case value1:
    //Statements executed when the result of expression matches value1
    [break;]
  case value2:
    //Statements executed when the result of expression matches value2
    [break;]
  ...
  case valueN:
    //Statements executed when the result of expression matches valueN
    [break;]
  default:
    //Statements executed when none of the values match the value of the expression
    [break;]
}

DESCRIPTION
A switch statement first evaluates its expression. It then looks for the
first case clause whose expression evaluates to the same value as the result 
of the input expression (using strict comparison, ===) and transfers control 
to that clause, executing the associated statements. (If multiple cases match 
the provided value, the first case that matches is selected, even if the cases 
are not equal to each other.) If no matching case clause is found, the program 
looks for the optional default clause, and if found, transfers control to that 
clause, executing the associated statements. If no default clause is found, 
the program continues execution at the statement following the end of switch. 
By convention, the default clause is the last clause, but it does not need to 
be so.

The optional break statement associated with each case label ensures that the 
program breaks out of switch once the matched statement is executed and 
continues execution at the statement following switch. If break is omitted, 
the program continues execution at the next statement in the switch statement.
